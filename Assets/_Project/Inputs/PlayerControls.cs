//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/_Project/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PinballControlls"",
            ""id"": ""cfb7f205-5e3c-46da-8bb5-3f70683a9a28"",
            ""actions"": [
                {
                    ""name"": ""LeftFlipper"",
                    ""type"": ""Button"",
                    ""id"": ""c8b318f8-eeba-458b-acff-ef588b77c167"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightFlipper"",
                    ""type"": ""Button"",
                    ""id"": ""af9da38d-f556-40de-b893-6b5aecea8020"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShakeTable"",
                    ""type"": ""Button"",
                    ""id"": ""afeda47e-83d7-4539-82cd-b1ee9c9901c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PullSpring"",
                    ""type"": ""Button"",
                    ""id"": ""e1b6c000-7a80-4912-9138-937b05f2d69e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpSlam"",
                    ""type"": ""Button"",
                    ""id"": ""7fdd6bae-312f-405c-a659-723b73885013"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""e379b591-12d5-4fa2-80fd-f481d17b479d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""6f82c6c7-d431-4142-9af8-2f8b6fa76d61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Redirect"",
                    ""type"": ""Button"",
                    ""id"": ""1c0f37b1-d0d7-4e29-bad6-4582cb41b35b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorPos"",
                    ""type"": ""Value"",
                    ""id"": ""2600d487-7806-484f-b694-45325597ede9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CursorMovement"",
                    ""type"": ""Value"",
                    ""id"": ""4dd7679b-a797-429f-ba88-13f5933dded5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""faccd2af-cd25-496a-99ad-e912f00a0dd6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LeftFlipper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d71c997-4b04-48fe-9f1c-c1b914c3e0df"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""RightFlipper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd478869-c1bd-47b6-8787-82f6d47c1334"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ShakeTable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dddbd8a-5eb9-4a66-9484-d85fff847355"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""PullSpring"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39890113-cc63-4ae4-a581-d8c54f6db0ce"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""JumpSlam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""710781b1-47d0-4766-beb1-ff94451139a0"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5bb5147-0575-4eef-bf76-927a7f955c98"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e5d35f4-d7dc-44da-b2e2-d08862cba73e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Redirect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8fcb49b-e0b5-4f07-ac2c-d686acacf455"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""CursorPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d63d59c8-bb69-4edd-a273-c07ccbe1f466"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""CursorMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RolyPolyControls"",
            ""id"": ""53329023-d8f3-4b65-b21b-2a041430972b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1fb7aef5-88db-4aa2-892c-b26c7545c3b9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Movement"",
                    ""id"": ""389814dc-b3c1-4f63-a277-1b6df23eeb25"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d7201173-7ed8-4a79-8bda-ab737e98d91f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ff252a8e-e594-4759-b1f6-1b1227fabd92"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""885eca50-c0bc-4bed-b3d5-242546a2b02e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""029dd704-95ed-4e36-99bc-78d0e5e1ccaf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PinballControlls
        m_PinballControlls = asset.FindActionMap("PinballControlls", throwIfNotFound: true);
        m_PinballControlls_LeftFlipper = m_PinballControlls.FindAction("LeftFlipper", throwIfNotFound: true);
        m_PinballControlls_RightFlipper = m_PinballControlls.FindAction("RightFlipper", throwIfNotFound: true);
        m_PinballControlls_ShakeTable = m_PinballControlls.FindAction("ShakeTable", throwIfNotFound: true);
        m_PinballControlls_PullSpring = m_PinballControlls.FindAction("PullSpring", throwIfNotFound: true);
        m_PinballControlls_JumpSlam = m_PinballControlls.FindAction("JumpSlam", throwIfNotFound: true);
        m_PinballControlls_Reset = m_PinballControlls.FindAction("Reset", throwIfNotFound: true);
        m_PinballControlls_Pause = m_PinballControlls.FindAction("Pause", throwIfNotFound: true);
        m_PinballControlls_Redirect = m_PinballControlls.FindAction("Redirect", throwIfNotFound: true);
        m_PinballControlls_CursorPos = m_PinballControlls.FindAction("CursorPos", throwIfNotFound: true);
        m_PinballControlls_CursorMovement = m_PinballControlls.FindAction("CursorMovement", throwIfNotFound: true);
        // RolyPolyControls
        m_RolyPolyControls = asset.FindActionMap("RolyPolyControls", throwIfNotFound: true);
        m_RolyPolyControls_Movement = m_RolyPolyControls.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PinballControlls
    private readonly InputActionMap m_PinballControlls;
    private List<IPinballControllsActions> m_PinballControllsActionsCallbackInterfaces = new List<IPinballControllsActions>();
    private readonly InputAction m_PinballControlls_LeftFlipper;
    private readonly InputAction m_PinballControlls_RightFlipper;
    private readonly InputAction m_PinballControlls_ShakeTable;
    private readonly InputAction m_PinballControlls_PullSpring;
    private readonly InputAction m_PinballControlls_JumpSlam;
    private readonly InputAction m_PinballControlls_Reset;
    private readonly InputAction m_PinballControlls_Pause;
    private readonly InputAction m_PinballControlls_Redirect;
    private readonly InputAction m_PinballControlls_CursorPos;
    private readonly InputAction m_PinballControlls_CursorMovement;
    public struct PinballControllsActions
    {
        private @PlayerControls m_Wrapper;
        public PinballControllsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftFlipper => m_Wrapper.m_PinballControlls_LeftFlipper;
        public InputAction @RightFlipper => m_Wrapper.m_PinballControlls_RightFlipper;
        public InputAction @ShakeTable => m_Wrapper.m_PinballControlls_ShakeTable;
        public InputAction @PullSpring => m_Wrapper.m_PinballControlls_PullSpring;
        public InputAction @JumpSlam => m_Wrapper.m_PinballControlls_JumpSlam;
        public InputAction @Reset => m_Wrapper.m_PinballControlls_Reset;
        public InputAction @Pause => m_Wrapper.m_PinballControlls_Pause;
        public InputAction @Redirect => m_Wrapper.m_PinballControlls_Redirect;
        public InputAction @CursorPos => m_Wrapper.m_PinballControlls_CursorPos;
        public InputAction @CursorMovement => m_Wrapper.m_PinballControlls_CursorMovement;
        public InputActionMap Get() { return m_Wrapper.m_PinballControlls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PinballControllsActions set) { return set.Get(); }
        public void AddCallbacks(IPinballControllsActions instance)
        {
            if (instance == null || m_Wrapper.m_PinballControllsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PinballControllsActionsCallbackInterfaces.Add(instance);
            @LeftFlipper.started += instance.OnLeftFlipper;
            @LeftFlipper.performed += instance.OnLeftFlipper;
            @LeftFlipper.canceled += instance.OnLeftFlipper;
            @RightFlipper.started += instance.OnRightFlipper;
            @RightFlipper.performed += instance.OnRightFlipper;
            @RightFlipper.canceled += instance.OnRightFlipper;
            @ShakeTable.started += instance.OnShakeTable;
            @ShakeTable.performed += instance.OnShakeTable;
            @ShakeTable.canceled += instance.OnShakeTable;
            @PullSpring.started += instance.OnPullSpring;
            @PullSpring.performed += instance.OnPullSpring;
            @PullSpring.canceled += instance.OnPullSpring;
            @JumpSlam.started += instance.OnJumpSlam;
            @JumpSlam.performed += instance.OnJumpSlam;
            @JumpSlam.canceled += instance.OnJumpSlam;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Redirect.started += instance.OnRedirect;
            @Redirect.performed += instance.OnRedirect;
            @Redirect.canceled += instance.OnRedirect;
            @CursorPos.started += instance.OnCursorPos;
            @CursorPos.performed += instance.OnCursorPos;
            @CursorPos.canceled += instance.OnCursorPos;
            @CursorMovement.started += instance.OnCursorMovement;
            @CursorMovement.performed += instance.OnCursorMovement;
            @CursorMovement.canceled += instance.OnCursorMovement;
        }

        private void UnregisterCallbacks(IPinballControllsActions instance)
        {
            @LeftFlipper.started -= instance.OnLeftFlipper;
            @LeftFlipper.performed -= instance.OnLeftFlipper;
            @LeftFlipper.canceled -= instance.OnLeftFlipper;
            @RightFlipper.started -= instance.OnRightFlipper;
            @RightFlipper.performed -= instance.OnRightFlipper;
            @RightFlipper.canceled -= instance.OnRightFlipper;
            @ShakeTable.started -= instance.OnShakeTable;
            @ShakeTable.performed -= instance.OnShakeTable;
            @ShakeTable.canceled -= instance.OnShakeTable;
            @PullSpring.started -= instance.OnPullSpring;
            @PullSpring.performed -= instance.OnPullSpring;
            @PullSpring.canceled -= instance.OnPullSpring;
            @JumpSlam.started -= instance.OnJumpSlam;
            @JumpSlam.performed -= instance.OnJumpSlam;
            @JumpSlam.canceled -= instance.OnJumpSlam;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Redirect.started -= instance.OnRedirect;
            @Redirect.performed -= instance.OnRedirect;
            @Redirect.canceled -= instance.OnRedirect;
            @CursorPos.started -= instance.OnCursorPos;
            @CursorPos.performed -= instance.OnCursorPos;
            @CursorPos.canceled -= instance.OnCursorPos;
            @CursorMovement.started -= instance.OnCursorMovement;
            @CursorMovement.performed -= instance.OnCursorMovement;
            @CursorMovement.canceled -= instance.OnCursorMovement;
        }

        public void RemoveCallbacks(IPinballControllsActions instance)
        {
            if (m_Wrapper.m_PinballControllsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPinballControllsActions instance)
        {
            foreach (var item in m_Wrapper.m_PinballControllsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PinballControllsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PinballControllsActions @PinballControlls => new PinballControllsActions(this);

    // RolyPolyControls
    private readonly InputActionMap m_RolyPolyControls;
    private List<IRolyPolyControlsActions> m_RolyPolyControlsActionsCallbackInterfaces = new List<IRolyPolyControlsActions>();
    private readonly InputAction m_RolyPolyControls_Movement;
    public struct RolyPolyControlsActions
    {
        private @PlayerControls m_Wrapper;
        public RolyPolyControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_RolyPolyControls_Movement;
        public InputActionMap Get() { return m_Wrapper.m_RolyPolyControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RolyPolyControlsActions set) { return set.Get(); }
        public void AddCallbacks(IRolyPolyControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_RolyPolyControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RolyPolyControlsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IRolyPolyControlsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IRolyPolyControlsActions instance)
        {
            if (m_Wrapper.m_RolyPolyControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRolyPolyControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_RolyPolyControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RolyPolyControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RolyPolyControlsActions @RolyPolyControls => new RolyPolyControlsActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPinballControllsActions
    {
        void OnLeftFlipper(InputAction.CallbackContext context);
        void OnRightFlipper(InputAction.CallbackContext context);
        void OnShakeTable(InputAction.CallbackContext context);
        void OnPullSpring(InputAction.CallbackContext context);
        void OnJumpSlam(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnRedirect(InputAction.CallbackContext context);
        void OnCursorPos(InputAction.CallbackContext context);
        void OnCursorMovement(InputAction.CallbackContext context);
    }
    public interface IRolyPolyControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
